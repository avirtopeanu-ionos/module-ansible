---
- hosts: localhost
  connection: local
  gather_facts: false

  vars:
      datacenter: Example
      location: us/las
      image: ubuntu:latest
      ssh_public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      timeout: 900

  tasks:
    - name: Provision a set of instances
      profitbricks:
          datacenter: "{{ datacenter }}"
          name: server%02d
          auto_increment: true
          cores: 4
          ram: 4096
          availability_zone: ZONE_1
          volume_availability_zone: ZONE_3
          volume_size: 10
          cpu_family: AMD_OPTERON
          disk_type: HDD
          image: "{{ image }}"
          ssh_keys:
              - "{{ ssh_public_key }}"
          location: "{{ location }}"
          count: 2
          assign_public_ip: true
          remove_boot_volume: true
          wait: true
          wait_timeout: "{{ timeout }}"
          state: present
      register: profitbricks

    - debug: msg="{{profitbricks.machines}}"

    - name: Create public SSH firewall rule
      profitbricks_firewall_rule:
          datacenter: "{{ datacenter }}"
          server: "{{ item.id }}"
          nic: "{{ item.nic.id }}"
          name: Allow SSH
          protocol: TCP
          source_ip: 0.0.0.0
          port_range_start: 22
          port_range_end: 22
          state: present
      with_items: "{{ profitbricks.machines }}"

    - name: Create public HTTP firewall rule
      profitbricks_firewall_rule:
          datacenter: "{{ datacenter }}"
          server: "{{ item.id }}"
          nic: "{{ item.nic.id }}"
          name: Allow SSH
          protocol: TCP
          source_ip: 0.0.0.0
          port_range_start: 80
          port_range_end: 80
          state: present
      with_items: "{{ profitbricks.machines }}"

    - name: Create private NIC
      profitbricks_nic:
          datacenter: "{{ datacenter }}"
          server: "{{ item.id }}"
          lan: 2
          state: present
      register: private_nic
      with_items: "{{ profitbricks.machines }}"

    - name: Create private SSH firewall rule
      profitbricks_firewall_rule:
          datacenter: "{{ datacenter }}"
          server: "{{ item.item.id }}"
          nic: "{{ item.nic.id }}"
          name: Allow SSH
          protocol: TCP
          source_ip: 0.0.0.0
          port_range_start: 22
          port_range_end: 22
          state: present
      with_items: "{{ private_nic.results }}"

    - name: Create private ping firewall rule
      profitbricks_firewall_rule:
          datacenter: "{{ datacenter }}"
          server: "{{ item.item.id }}"
          nic: "{{ item.nic.id }}"
          name: Allow Ping
          protocol: ICMP
          source_ip: 0.0.0.0
          icmp_type: 8
          icmp_code: 0
          state: present
      with_items: "{{ private_nic.results }}"

    - name: Create data volume
      profitbricks_volume:
          datacenter: "{{ datacenter }}"
          server: "{{ item.id }}"
          name: "{{ item.properties.name }}-data%02d"
          size: 10
          disk_type: SSD
          licence_type: OTHER
          wait_timeout: "{{ timeout }}"
          state: present
      with_items: "{{ profitbricks.machines }}"

    - name: Add instances to servers host group
      add_host:
          name: "{{ item.public_ip }}"
          instance_name: "{{ item.properties.name }}"
          ansible_ssh_host: "{{ item.public_ip }}"
          ansible_ssh_user: root
          groupname: servers
      with_items: "{{ profitbricks.machines }}"
      when: profitbricks.action == 'create'

- name: Configure instances
  hosts: servers
  become: false
  gather_facts: false

  pre_tasks:
    - debug: msg="{{inventory_hostname}}"

    - name: Wait for SSH banners
      local_action: wait_for port=22 host="{{inventory_hostname}}" search_regex=OpenSSH delay=5

    - name: Install Python
      raw: test -e /usr/bin/python || (apt update -qy && apt install -qy python-minimal)

  tasks:
    - name: Install nginx
      apt: name={{ item }} state=latest
      with_items:
        - nginx-light
